#!/usr/bin/env node

'use strict';

var fs = require('fs');
var path = require('path');

var Adapter = require('../src/adapter');
var program = require('commander');
var glob = require('glob');
var colors = require('colors/safe');
var util = require('util');

var fontSpider = require('../');
var spider = fontSpider.spider;
var compressor = fontSpider.compressor;

program
    .version(require('../package.json').version)
    .usage('[options] <htmlFile ...>')
    .option('--info', 'show only webfont information')
    .option('--ignore <pattern>', 'ignore the files', list)
    .option('--map <remotePath,localPath>', 'mapping the remote path to the local', toMap)
    .option('--no-backup', 'do not back up fonts')
    .option('--debug', 'enable debug mode')
    .parse(process.argv);


function list(args) {
    return args.split(',');
}

function toMap(args) {
    args = list(args);

    var map = [];
    var p = 2;
    var n = args.length / p;
    for (var i = 0; i < n; i++) {
        map.push([
            args[p * i],
            args[p * i + 1]
        ]);
    }

    return map;
}

// 扁平化二维数组
function reduce(array) {
    var ret = [];

    array.forEach(function(item) {
        ret.push.apply(ret, item);
    });

    return ret;
}


var htmlFiles = program.args;
var options = new Adapter({
    resourceBeforeLoad: function(file) {
        writeln('Load:', colors.cyan(file));
    }
});


if (!htmlFiles.length) {
    program.help();
    process.exit(1);
} else {
    htmlFiles = htmlFiles.map(function(file) {
        if (/https?/.test(file)) {
            return [file];
        } else {
            file = path.resolve(file);
            return glob.sync(file);
        }
    });
    htmlFiles = reduce(htmlFiles);
}


// 合并配置项目
Object.keys(program).forEach(function(key) {
    if (key in options) {
        options[key] = program[key];
    }
});

if (program.debug) {
    options.silent = false;
}


if (program.info) {
    showWebFont(htmlFiles, options);
} else {
    compressWebFont(htmlFiles, options);
}


function onerror(errors) {
    clearWriteln();

    var message = 'Error: ' + errors.message;
    var stack = errors.stack.toString();

    stack = stack.split('\n');
    stack.shift();
    stack = stack.join('\n');

    if (process.stderr.isTTY) {
        message = colors.red(message);
        stack = colors.grey(stack);
    }

    process.stderr.write(message + '\n');
    process.stderr.write(stack + '\n');

    // 可能有异步 http 任务运行，强制中断
    process.exit(1);
}


// 显示 webFont 信息
function showWebFont(htmlFiles, options) {

    writeln('Loading ..');

    spider(htmlFiles, options).then(function(webFonts) {

        webFonts = JSON.stringify(webFonts, null, 4);
        clearWriteln();

        if (process.stdout.isTTY) {
            webFonts = JSON.parse(webFonts);
            process.stdout.write(util.inspect(webFonts, {
                colors: true,
                depth: null
            }) + '\n');
        } else {
            process.stdout.write(webFonts + '\n');
        }

    }).catch(onerror);
}

// 压缩 webFont
function compressWebFont(htmlFiles, options) {

    writeln('Loading ..');

    spider(htmlFiles, options).then(function(webFonts) {

        if (webFonts.length === 0) {
            clearWriteln();
            write('<web font not found>');
            return;
        }

        writeln('Loading ...');

        return compressor(webFonts, options);
    }).then(function(webFonts) {

        webFonts.forEach(function(webFont) {
            clearWriteln();
            write('Font family:', colors.green(webFont.family));
            write('Original size:', colors.green(webFont.originalSize / 1000 + ' KB'));
            write('Include chars:', webFont.chars);
            write('Font id:', webFont.id);
            write('CSS selector:', webFont.selectors.join(', '));
            write('Font htmlF:');

            webFont.files.forEach(function(file) {
                if (fs.existsSync(file.source)) {
                    write('File', colors.cyan(path.relative('./', file.source)),
                        'created:', colors.green(file.size / 1000 + ' KB'));
                } else {
                    write(colors.red('File ' + path.relative('./', file.source) + ' not created'));
                }
            });

            write('');
        });

        return webFonts;
    }).catch(onerror);
}


function write() {
    var stream = process.stdout;

    if (stream.isTTY) {
        stream.write(Array.prototype.join.call(arguments, ' ') + '\n');
    }
}


function writeln() {
    var stream = process.stdout;

    if (stream.isTTY) {
        stream.clearLine();
        stream.cursorTo(0);
        stream.write(Array.prototype.join.call(arguments, ' '));
    }
}

function clearWriteln() {
    writeln('');
}