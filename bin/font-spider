#!/usr/bin/env node

'use strict';

var FontSpider = require('../');
var files = process.argv.slice(2);


// 颜文字
;(function () {
    var styles = {
        // styles
        'bold'      : ['\x1B[1m',  '\x1B[22m'],
        'italic'    : ['\x1B[3m',  '\x1B[23m'],
        'underline' : ['\x1B[4m',  '\x1B[24m'],
        'inverse'   : ['\x1B[7m',  '\x1B[27m'],
        // colors
        'white'     : ['\x1B[37m', '\x1B[39m'],
        'grey'      : ['\x1B[90m', '\x1B[39m'],
        'black'     : ['\x1B[30m', '\x1B[39m'],
        'blue'      : ['\x1B[34m', '\x1B[39m'],
        'cyan'      : ['\x1B[36m', '\x1B[39m'],
        'green'     : ['\x1B[32m', '\x1B[39m'],
        'magenta'   : ['\x1B[35m', '\x1B[39m'],
        'red'       : ['\x1B[31m', '\x1B[39m'],
        'yellow'    : ['\x1B[33m', '\x1B[39m']
    };

    styles['b'] = styles['bold'];
    styles['i'] = styles['italic'];
    styles['u'] = styles['underline'];

    for (var color in styles) {
        String.prototype.__defineGetter__(color, (function (color) {
            return function () {
                return styles[color][0] + this + styles[color][1];
            };
        })(color));
    }
})();


if (!files.length) {
	return;
}

var fontspider = new FontSpider(files, {
	debug: false
});

fontspider.onoutput = function (data) {
	console.log('Font name: ' + (data.fontName).cyan);
	console.log('Include chars: ' + data.includeChars);
	console.log('Original size: ' + (data.originalSize / 1000 + ' KB').green);
	data.output.forEach(function (item) {
		console.log('File ' + (item.file).cyan + ' created: ' + (item.size / 1000 + ' kB').green);
	});
	console.log('')
};

fontspider.onend = function () {};
fontspider.onerror = function (e) {
	console.error((e.message).red);
    if (e.result) {
        console.error(e.result);
    }
}

fontspider.start();
